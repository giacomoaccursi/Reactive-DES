[{"name":"INIT","description":"control.EngineImpl.Status.INIT","location":"-reactive -d-e-s/control/-engine-impl/-status/-i-n-i-t/index.html","searchKeys":["INIT","INIT","control.EngineImpl.Status.INIT"]},{"name":"RUNNING","description":"control.EngineImpl.Status.RUNNING","location":"-reactive -d-e-s/control/-engine-impl/-status/-r-u-n-n-i-n-g/index.html","searchKeys":["RUNNING","RUNNING","control.EngineImpl.Status.RUNNING"]},{"name":"TERMINATED","description":"control.EngineImpl.Status.TERMINATED","location":"-reactive -d-e-s/control/-engine-impl/-status/-t-e-r-m-i-n-a-t-e-d/index.html","searchKeys":["TERMINATED","TERMINATED","control.EngineImpl.Status.TERMINATED"]},{"name":"abstract fun addEvent(event: Event)","description":"control.Scheduler.addEvent","location":"-reactive -d-e-s/control/-scheduler/add-event.html","searchKeys":["addEvent","abstract fun addEvent(event: Event)","control.Scheduler.addEvent"]},{"name":"abstract fun addNeighbor(node: Node): Neighborhood","description":"entity.Neighborhood.addNeighbor","location":"-reactive -d-e-s/entity/-neighborhood/add-neighbor.html","searchKeys":["addNeighbor","abstract fun addNeighbor(node: Node): Neighborhood","entity.Neighborhood.addNeighbor"]},{"name":"abstract fun canExecute(): Boolean","description":"entity.Event.canExecute","location":"-reactive -d-e-s/entity/-event/can-execute.html","searchKeys":["canExecute","abstract fun canExecute(): Boolean","entity.Event.canExecute"]},{"name":"abstract fun computeNeighbors(center: Node, environment: Environment): Set<Node>","description":"entity.LinkingRule.computeNeighbors","location":"-reactive -d-e-s/entity/-linking-rule/compute-neighbors.html","searchKeys":["computeNeighbors","abstract fun computeNeighbors(center: Node, environment: Environment): Set<Node>","entity.LinkingRule.computeNeighbors"]},{"name":"abstract fun eventsUpdated()","description":"control.Scheduler.eventsUpdated","location":"-reactive -d-e-s/control/-scheduler/events-updated.html","searchKeys":["eventsUpdated","abstract fun eventsUpdated()","control.Scheduler.eventsUpdated"]},{"name":"abstract fun getAllNodes(): List<Node>","description":"entity.Environment.getAllNodes","location":"-reactive -d-e-s/entity/-environment/get-all-nodes.html","searchKeys":["getAllNodes","abstract fun getAllNodes(): List<Node>","entity.Environment.getAllNodes"]},{"name":"abstract fun getEventList(): List<Event>","description":"control.Scheduler.getEventList","location":"-reactive -d-e-s/control/-scheduler/get-event-list.html","searchKeys":["getEventList","abstract fun getEventList(): List<Event>","control.Scheduler.getEventList"]},{"name":"abstract fun getNeighborhood(node: Node): Neighborhood?","description":"entity.Environment.getNeighborhood","location":"-reactive -d-e-s/entity/-environment/get-neighborhood.html","searchKeys":["getNeighborhood","abstract fun getNeighborhood(node: Node): Neighborhood?","entity.Environment.getNeighborhood"]},{"name":"abstract fun getNext(): Event?","description":"control.Scheduler.getNext","location":"-reactive -d-e-s/control/-scheduler/get-next.html","searchKeys":["getNext","abstract fun getNext(): Event?","control.Scheduler.getNext"]},{"name":"abstract fun getNodeFromId(id: Int): Node","description":"entity.Environment.getNodeFromId","location":"-reactive -d-e-s/entity/-environment/get-node-from-id.html","searchKeys":["getNodeFromId","abstract fun getNodeFromId(id: Int): Node","entity.Environment.getNodeFromId"]},{"name":"abstract fun getNodePosition(node: Node): Position","description":"entity.Environment.getNodePosition","location":"-reactive -d-e-s/entity/-environment/get-node-position.html","searchKeys":["getNodePosition","abstract fun getNodePosition(node: Node): Position","entity.Environment.getNodePosition"]},{"name":"abstract fun getNumberOfEventExecutionObserver(): Int","description":"entity.Event.getNumberOfEventExecutionObserver","location":"-reactive -d-e-s/entity/-event/get-number-of-event-execution-observer.html","searchKeys":["getNumberOfEventExecutionObserver","abstract fun getNumberOfEventExecutionObserver(): Int","entity.Event.getNumberOfEventExecutionObserver"]},{"name":"abstract fun getObservedEvents(): List<Event>","description":"entity.Event.getObservedEvents","location":"-reactive -d-e-s/entity/-event/get-observed-events.html","searchKeys":["getObservedEvents","abstract fun getObservedEvents(): List<Event>","entity.Event.getObservedEvents"]},{"name":"abstract fun initializationComplete(currentTime: Time)","description":"entity.Event.initializationComplete","location":"-reactive -d-e-s/entity/-event/initialization-complete.html","searchKeys":["initializationComplete","abstract fun initializationComplete(currentTime: Time)","entity.Event.initializationComplete"]},{"name":"abstract fun isNeighbor(center: Node, other: Node, environment: Environment): Boolean","description":"entity.LinkingRule.isNeighbor","location":"-reactive -d-e-s/entity/-linking-rule/is-neighbor.html","searchKeys":["isNeighbor","abstract fun isNeighbor(center: Node, other: Node, environment: Environment): Boolean","entity.LinkingRule.isNeighbor"]},{"name":"abstract fun isValid(): Boolean","description":"entity.Condition.isValid","location":"-reactive -d-e-s/entity/-condition/is-valid.html","searchKeys":["isValid","abstract fun isValid(): Boolean","entity.Condition.isValid"]},{"name":"abstract fun observeExecution(): AwaitableMutableSharedFlow<Event>","description":"entity.Event.observeExecution","location":"-reactive -d-e-s/entity/-event/observe-execution.html","searchKeys":["observeExecution","abstract fun observeExecution(): AwaitableMutableSharedFlow<Event>","entity.Event.observeExecution"]},{"name":"abstract fun removeEvent(event: Event)","description":"control.Scheduler.removeEvent","location":"-reactive -d-e-s/control/-scheduler/remove-event.html","searchKeys":["removeEvent","abstract fun removeEvent(event: Event)","control.Scheduler.removeEvent"]},{"name":"abstract fun removeNeighbor(node: Node): Neighborhood","description":"entity.Neighborhood.removeNeighbor","location":"-reactive -d-e-s/entity/-neighborhood/remove-neighbor.html","searchKeys":["removeNeighbor","abstract fun removeNeighbor(node: Node): Neighborhood","entity.Neighborhood.removeNeighbor"]},{"name":"abstract fun setLinkingRule(linkingRule: LinkingRule)","description":"entity.Environment.setLinkingRule","location":"-reactive -d-e-s/entity/-environment/set-linking-rule.html","searchKeys":["setLinkingRule","abstract fun setLinkingRule(linkingRule: LinkingRule)","entity.Environment.setLinkingRule"]},{"name":"abstract fun toDouble(): Double","description":"entity.Time.toDouble","location":"-reactive -d-e-s/entity/-time/to-double.html","searchKeys":["toDouble","abstract fun toDouble(): Double","entity.Time.toDouble"]},{"name":"abstract fun updateEvent(currentTime: Time)","description":"entity.Event.updateEvent","location":"-reactive -d-e-s/entity/-event/update-event.html","searchKeys":["updateEvent","abstract fun updateEvent(currentTime: Time)","entity.Event.updateEvent"]},{"name":"abstract operator fun plus(other: Time): Time","description":"entity.Time.plus","location":"-reactive -d-e-s/entity/-time/plus.html","searchKeys":["plus","abstract operator fun plus(other: Time): Time","entity.Time.plus"]},{"name":"abstract suspend fun addContent(content: Content)","description":"entity.Node.addContent","location":"-reactive -d-e-s/entity/-node/add-content.html","searchKeys":["addContent","abstract suspend fun addContent(content: Content)","entity.Node.addContent"]},{"name":"abstract suspend fun addEvent(event: Event)","description":"entity.Node.addEvent","location":"-reactive -d-e-s/entity/-node/add-event.html","searchKeys":["addEvent","abstract suspend fun addEvent(event: Event)","entity.Node.addEvent"]},{"name":"abstract suspend fun addNode(node: Node, position: Position)","description":"entity.Environment.addNode","location":"-reactive -d-e-s/entity/-environment/add-node.html","searchKeys":["addNode","abstract suspend fun addNode(node: Node, position: Position)","entity.Environment.addNode"]},{"name":"abstract suspend fun eventRemoved()","description":"entity.Event.eventRemoved","location":"-reactive -d-e-s/entity/-event/event-removed.html","searchKeys":["eventRemoved","abstract suspend fun eventRemoved()","entity.Event.eventRemoved"]},{"name":"abstract suspend fun execute()","description":"entity.Action.execute","location":"-reactive -d-e-s/entity/-action/execute.html","searchKeys":["execute","abstract suspend fun execute()","entity.Action.execute"]},{"name":"abstract suspend fun execute()","description":"entity.Event.execute","location":"-reactive -d-e-s/entity/-event/execute.html","searchKeys":["execute","abstract suspend fun execute()","entity.Event.execute"]},{"name":"abstract suspend fun moveNode(node: Node, position: Position)","description":"entity.Environment.moveNode","location":"-reactive -d-e-s/entity/-environment/move-node.html","searchKeys":["moveNode","abstract suspend fun moveNode(node: Node, position: Position)","entity.Environment.moveNode"]},{"name":"abstract suspend fun removeContent(content: Content)","description":"entity.Node.removeContent","location":"-reactive -d-e-s/entity/-node/remove-content.html","searchKeys":["removeContent","abstract suspend fun removeContent(content: Content)","entity.Node.removeContent"]},{"name":"abstract suspend fun removeEvent(event: Event)","description":"entity.Node.removeEvent","location":"-reactive -d-e-s/entity/-node/remove-event.html","searchKeys":["removeEvent","abstract suspend fun removeEvent(event: Event)","entity.Node.removeEvent"]},{"name":"abstract suspend fun removeNode(node: Node)","description":"entity.Environment.removeNode","location":"-reactive -d-e-s/entity/-environment/remove-node.html","searchKeys":["removeNode","abstract suspend fun removeNode(node: Node)","entity.Environment.removeNode"]},{"name":"abstract suspend fun setValue(value: Int)","description":"entity.Content.setValue","location":"-reactive -d-e-s/entity/-content/set-value.html","searchKeys":["setValue","abstract suspend fun setValue(value: Int)","entity.Content.setValue"]},{"name":"abstract suspend fun start()","description":"control.Engine.start","location":"-reactive -d-e-s/control/-engine/start.html","searchKeys":["start","abstract suspend fun start()","control.Engine.start"]},{"name":"abstract suspend fun updateNeighborhoods(neighborhoods: Map<Int, Neighborhood>)","description":"entity.Environment.updateNeighborhoods","location":"-reactive -d-e-s/entity/-environment/update-neighborhoods.html","searchKeys":["updateNeighborhoods","abstract suspend fun updateNeighborhoods(neighborhoods: Map<Int, Neighborhood>)","entity.Environment.updateNeighborhoods"]},{"name":"abstract val center: Node","description":"entity.Neighborhood.center","location":"-reactive -d-e-s/entity/-neighborhood/center.html","searchKeys":["center","abstract val center: Node","entity.Neighborhood.center"]},{"name":"abstract val contents: AwaitableMutableStateFlow<List<Content>>","description":"entity.Node.contents","location":"-reactive -d-e-s/entity/-node/contents.html","searchKeys":["contents","abstract val contents: AwaitableMutableStateFlow<List<Content>>","entity.Node.contents"]},{"name":"abstract val events: AwaitableMutableStateFlow<List<Event>>","description":"entity.Node.events","location":"-reactive -d-e-s/entity/-node/events.html","searchKeys":["events","abstract val events: AwaitableMutableStateFlow<List<Event>>","entity.Node.events"]},{"name":"abstract val id: Int","description":"entity.Event.id","location":"-reactive -d-e-s/entity/-event/id.html","searchKeys":["id","abstract val id: Int","entity.Event.id"]},{"name":"abstract val id: Int","description":"entity.Node.id","location":"-reactive -d-e-s/entity/-node/id.html","searchKeys":["id","abstract val id: Int","entity.Node.id"]},{"name":"abstract val neighborhoods: AwaitableMutableStateFlow<Map<Int, Neighborhood>>","description":"entity.Environment.neighborhoods","location":"-reactive -d-e-s/entity/-environment/neighborhoods.html","searchKeys":["neighborhoods","abstract val neighborhoods: AwaitableMutableStateFlow<Map<Int, Neighborhood>>","entity.Environment.neighborhoods"]},{"name":"abstract val neighbors: Set<Node>","description":"entity.Neighborhood.neighbors","location":"-reactive -d-e-s/entity/-neighborhood/neighbors.html","searchKeys":["neighbors","abstract val neighbors: Set<Node>","entity.Neighborhood.neighbors"]},{"name":"abstract val node: Node","description":"entity.Event.node","location":"-reactive -d-e-s/entity/-event/node.html","searchKeys":["node","abstract val node: Node","entity.Event.node"]},{"name":"abstract val nodes: AwaitableMutableStateFlow<List<Node>>","description":"entity.Environment.nodes","location":"-reactive -d-e-s/entity/-environment/nodes.html","searchKeys":["nodes","abstract val nodes: AwaitableMutableStateFlow<List<Node>>","entity.Environment.nodes"]},{"name":"abstract val nodesToPosition: AwaitableMutableStateFlow<Map<Int, Position>>","description":"entity.Environment.nodesToPosition","location":"-reactive -d-e-s/entity/-environment/nodes-to-position.html","searchKeys":["nodesToPosition","abstract val nodesToPosition: AwaitableMutableStateFlow<Map<Int, Position>>","entity.Environment.nodesToPosition"]},{"name":"abstract val tau: Time","description":"entity.Event.tau","location":"-reactive -d-e-s/entity/-event/tau.html","searchKeys":["tau","abstract val tau: Time","entity.Event.tau"]},{"name":"abstract var value: AwaitableMutableStateFlow<Int>","description":"entity.Content.value","location":"-reactive -d-e-s/entity/-content/value.html","searchKeys":["value","abstract var value: AwaitableMutableStateFlow<Int>","entity.Content.value"]},{"name":"class AwaitableMutableSharedFlow<T>(sharedFlow: MutableSharedFlow<T>) : AwaitableMutableFlow<T> , MutableSharedFlow<T> ","description":"flow.AwaitableMutableSharedFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-shared-flow/index.html","searchKeys":["AwaitableMutableSharedFlow","class AwaitableMutableSharedFlow<T>(sharedFlow: MutableSharedFlow<T>) : AwaitableMutableFlow<T> , MutableSharedFlow<T> ","flow.AwaitableMutableSharedFlow"]},{"name":"class AwaitableMutableStateFlow<T>(stateFlow: MutableStateFlow<T>) : AwaitableMutableFlow<T> , MutableStateFlow<T> ","description":"flow.AwaitableMutableStateFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-state-flow/index.html","searchKeys":["AwaitableMutableStateFlow","class AwaitableMutableStateFlow<T>(stateFlow: MutableStateFlow<T>) : AwaitableMutableFlow<T> , MutableStateFlow<T> ","flow.AwaitableMutableStateFlow"]},{"name":"class ContentImpl(initialValue: Int) : Content","description":"entity.ContentImpl","location":"-reactive -d-e-s/entity/-content-impl/index.html","searchKeys":["ContentImpl","class ContentImpl(initialValue: Int) : Content","entity.ContentImpl"]},{"name":"class DoubleTime(time: Double = 0.0) : Time","description":"entity.DoubleTime","location":"-reactive -d-e-s/entity/-double-time/index.html","searchKeys":["DoubleTime","class DoubleTime(time: Double = 0.0) : Time","entity.DoubleTime"]},{"name":"class DummyCondition : Condition","description":"entity.DummyCondition","location":"-reactive -d-e-s/entity/-dummy-condition/index.html","searchKeys":["DummyCondition","class DummyCondition : Condition","entity.DummyCondition"]},{"name":"class EngineImpl(environment: Environment, scheduler: Scheduler, maxSteps: Int, time: Time) : Engine","description":"control.EngineImpl","location":"-reactive -d-e-s/control/-engine-impl/index.html","searchKeys":["EngineImpl","class EngineImpl(environment: Environment, scheduler: Scheduler, maxSteps: Int, time: Time) : Engine","control.EngineImpl"]},{"name":"class EnvironmentImpl : Environment","description":"entity.EnvironmentImpl","location":"-reactive -d-e-s/entity/-environment-impl/index.html","searchKeys":["EnvironmentImpl","class EnvironmentImpl : Environment","entity.EnvironmentImpl"]},{"name":"class EventImpl(val node: Node, conditions: ArrayList<Condition> = ArrayList(), actions: ArrayList<Action> = ArrayList(), environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default, val id: Int) : Event","description":"entity.EventImpl","location":"-reactive -d-e-s/entity/-event-impl/index.html","searchKeys":["EventImpl","class EventImpl(val node: Node, conditions: ArrayList<Condition> = ArrayList(), actions: ArrayList<Action> = ArrayList(), environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default, val id: Int) : Event","entity.EventImpl"]},{"name":"class ListScheduler(events: ArrayList<Event> = ArrayList()) : Scheduler","description":"control.ListScheduler","location":"-reactive -d-e-s/control/-list-scheduler/index.html","searchKeys":["ListScheduler","class ListScheduler(events: ArrayList<Event> = ArrayList()) : Scheduler","control.ListScheduler"]},{"name":"class MoveNodeAction(environment: Environment) : Action","description":"entity.MoveNodeAction","location":"-reactive -d-e-s/entity/-move-node-action/index.html","searchKeys":["MoveNodeAction","class MoveNodeAction(environment: Environment) : Action","entity.MoveNodeAction"]},{"name":"class NodeImpl(val id: Int) : Node","description":"entity.NodeImpl","location":"-reactive -d-e-s/entity/-node-impl/index.html","searchKeys":["NodeImpl","class NodeImpl(val id: Int) : Node","entity.NodeImpl"]},{"name":"class PositionLinkingRule(radius: Double, environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default) : LinkingRule","description":"entity.PositionLinkingRule","location":"-reactive -d-e-s/entity/-position-linking-rule/index.html","searchKeys":["PositionLinkingRule","class PositionLinkingRule(radius: Double, environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default) : LinkingRule","entity.PositionLinkingRule"]},{"name":"class SimpleNeighborhood(val center: Node, val neighbors: Set<Node>) : Neighborhood","description":"entity.SimpleNeighborhood","location":"-reactive -d-e-s/entity/-simple-neighborhood/index.html","searchKeys":["SimpleNeighborhood","class SimpleNeighborhood(val center: Node, val neighbors: Set<Node>) : Neighborhood","entity.SimpleNeighborhood"]},{"name":"class SimulationExporter","description":"control.SimulationExporter","location":"-reactive -d-e-s/control/-simulation-exporter/index.html","searchKeys":["SimulationExporter","class SimulationExporter","control.SimulationExporter"]},{"name":"class SumAction(environment: Environment) : Action","description":"entity.SumAction","location":"-reactive -d-e-s/entity/-sum-action/index.html","searchKeys":["SumAction","class SumAction(environment: Environment) : Action","entity.SumAction"]},{"name":"class TimeDistribution(time: Time)","description":"entity.TimeDistribution","location":"-reactive -d-e-s/entity/-time-distribution/index.html","searchKeys":["TimeDistribution","class TimeDistribution(time: Time)","entity.TimeDistribution"]},{"name":"const val MAX_STEPS: Int = 1000","description":"MAX_STEPS","location":"-reactive -d-e-s/[root]/-m-a-x_-s-t-e-p-s.html","searchKeys":["MAX_STEPS","const val MAX_STEPS: Int = 1000","MAX_STEPS"]},{"name":"constructor()","description":"control.SimulationExporter.SimulationExporter","location":"-reactive -d-e-s/control/-simulation-exporter/-simulation-exporter.html","searchKeys":["SimulationExporter","constructor()","control.SimulationExporter.SimulationExporter"]},{"name":"constructor()","description":"entity.DummyCondition.DummyCondition","location":"-reactive -d-e-s/entity/-dummy-condition/-dummy-condition.html","searchKeys":["DummyCondition","constructor()","entity.DummyCondition.DummyCondition"]},{"name":"constructor()","description":"entity.EnvironmentImpl.EnvironmentImpl","location":"-reactive -d-e-s/entity/-environment-impl/-environment-impl.html","searchKeys":["EnvironmentImpl","constructor()","entity.EnvironmentImpl.EnvironmentImpl"]},{"name":"constructor(center: Node, neighbors: Set<Node>)","description":"entity.SimpleNeighborhood.SimpleNeighborhood","location":"-reactive -d-e-s/entity/-simple-neighborhood/-simple-neighborhood.html","searchKeys":["SimpleNeighborhood","constructor(center: Node, neighbors: Set<Node>)","entity.SimpleNeighborhood.SimpleNeighborhood"]},{"name":"constructor(environment: Environment)","description":"entity.MoveNodeAction.MoveNodeAction","location":"-reactive -d-e-s/entity/-move-node-action/-move-node-action.html","searchKeys":["MoveNodeAction","constructor(environment: Environment)","entity.MoveNodeAction.MoveNodeAction"]},{"name":"constructor(environment: Environment)","description":"entity.SumAction.SumAction","location":"-reactive -d-e-s/entity/-sum-action/-sum-action.html","searchKeys":["SumAction","constructor(environment: Environment)","entity.SumAction.SumAction"]},{"name":"constructor(environment: Environment, scheduler: Scheduler, maxSteps: Int, time: Time)","description":"control.EngineImpl.EngineImpl","location":"-reactive -d-e-s/control/-engine-impl/-engine-impl.html","searchKeys":["EngineImpl","constructor(environment: Environment, scheduler: Scheduler, maxSteps: Int, time: Time)","control.EngineImpl.EngineImpl"]},{"name":"constructor(events: ArrayList<Event> = ArrayList())","description":"control.ListScheduler.ListScheduler","location":"-reactive -d-e-s/control/-list-scheduler/-list-scheduler.html","searchKeys":["ListScheduler","constructor(events: ArrayList<Event> = ArrayList())","control.ListScheduler.ListScheduler"]},{"name":"constructor(flow: MutableSharedFlow<T>, ioDispatcher: CoroutineContext = Dispatchers.IO)","description":"flow.AwaitableMutableFlow.AwaitableMutableFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-flow/-awaitable-mutable-flow.html","searchKeys":["AwaitableMutableFlow","constructor(flow: MutableSharedFlow<T>, ioDispatcher: CoroutineContext = Dispatchers.IO)","flow.AwaitableMutableFlow.AwaitableMutableFlow"]},{"name":"constructor(id: Int)","description":"entity.NodeImpl.NodeImpl","location":"-reactive -d-e-s/entity/-node-impl/-node-impl.html","searchKeys":["NodeImpl","constructor(id: Int)","entity.NodeImpl.NodeImpl"]},{"name":"constructor(initialValue: Int)","description":"entity.ContentImpl.ContentImpl","location":"-reactive -d-e-s/entity/-content-impl/-content-impl.html","searchKeys":["ContentImpl","constructor(initialValue: Int)","entity.ContentImpl.ContentImpl"]},{"name":"constructor(node: Node, conditions: ArrayList<Condition> = ArrayList(), actions: ArrayList<Action> = ArrayList(), environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default, id: Int)","description":"entity.EventImpl.EventImpl","location":"-reactive -d-e-s/entity/-event-impl/-event-impl.html","searchKeys":["EventImpl","constructor(node: Node, conditions: ArrayList<Condition> = ArrayList(), actions: ArrayList<Action> = ArrayList(), environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default, id: Int)","entity.EventImpl.EventImpl"]},{"name":"constructor(radius: Double, environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default)","description":"entity.PositionLinkingRule.PositionLinkingRule","location":"-reactive -d-e-s/entity/-position-linking-rule/-position-linking-rule.html","searchKeys":["PositionLinkingRule","constructor(radius: Double, environment: Environment, coroutineContext: CoroutineContext = Dispatchers.Default)","entity.PositionLinkingRule.PositionLinkingRule"]},{"name":"constructor(sharedFlow: MutableSharedFlow<T>)","description":"flow.AwaitableMutableSharedFlow.AwaitableMutableSharedFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-shared-flow/-awaitable-mutable-shared-flow.html","searchKeys":["AwaitableMutableSharedFlow","constructor(sharedFlow: MutableSharedFlow<T>)","flow.AwaitableMutableSharedFlow.AwaitableMutableSharedFlow"]},{"name":"constructor(stateFlow: MutableStateFlow<T>)","description":"flow.AwaitableMutableStateFlow.AwaitableMutableStateFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-state-flow/-awaitable-mutable-state-flow.html","searchKeys":["AwaitableMutableStateFlow","constructor(stateFlow: MutableStateFlow<T>)","flow.AwaitableMutableStateFlow.AwaitableMutableStateFlow"]},{"name":"constructor(time: Double = 0.0)","description":"entity.DoubleTime.DoubleTime","location":"-reactive -d-e-s/entity/-double-time/-double-time.html","searchKeys":["DoubleTime","constructor(time: Double = 0.0)","entity.DoubleTime.DoubleTime"]},{"name":"constructor(time: Time)","description":"entity.TimeDistribution.TimeDistribution","location":"-reactive -d-e-s/entity/-time-distribution/-time-distribution.html","searchKeys":["TimeDistribution","constructor(time: Time)","entity.TimeDistribution.TimeDistribution"]},{"name":"constructor(x: Double, y: Double)","description":"entity.Position.Position","location":"-reactive -d-e-s/entity/-position/-position.html","searchKeys":["Position","constructor(x: Double, y: Double)","entity.Position.Position"]},{"name":"data class Position(x: Double, y: Double)","description":"entity.Position","location":"-reactive -d-e-s/entity/-position/index.html","searchKeys":["Position","data class Position(x: Double, y: Double)","entity.Position"]},{"name":"enum Status : Enum<EngineImpl.Status> ","description":"control.EngineImpl.Status","location":"-reactive -d-e-s/control/-engine-impl/-status/index.html","searchKeys":["Status","enum Status : Enum<EngineImpl.Status> ","control.EngineImpl.Status"]},{"name":"fun distanceTo(other: Position): Double","description":"entity.Position.distanceTo","location":"-reactive -d-e-s/entity/-position/distance-to.html","searchKeys":["distanceTo","fun distanceTo(other: Position): Double","entity.Position.distanceTo"]},{"name":"fun exportData(environment: Environment, currentTime: Time, currentStep: Int, scheduler: Scheduler)","description":"control.SimulationExporter.exportData","location":"-reactive -d-e-s/control/-simulation-exporter/export-data.html","searchKeys":["exportData","fun exportData(environment: Environment, currentTime: Time, currentStep: Int, scheduler: Scheduler)","control.SimulationExporter.exportData"]},{"name":"fun getNextOccurrence(): Time","description":"entity.TimeDistribution.getNextOccurrence","location":"-reactive -d-e-s/entity/-time-distribution/get-next-occurrence.html","searchKeys":["getNextOccurrence","fun getNextOccurrence(): Time","entity.TimeDistribution.getNextOccurrence"]},{"name":"fun notifyConsumed()","description":"flow.AwaitableMutableFlow.notifyConsumed","location":"-reactive -d-e-s/flow/-awaitable-mutable-flow/notify-consumed.html","searchKeys":["notifyConsumed","fun notifyConsumed()","flow.AwaitableMutableFlow.notifyConsumed"]},{"name":"fun sum(positionToSum: Position): Position","description":"entity.Position.sum","location":"-reactive -d-e-s/entity/-position/sum.html","searchKeys":["sum","fun sum(positionToSum: Position): Position","entity.Position.sum"]},{"name":"fun update(currentTime: Time)","description":"entity.TimeDistribution.update","location":"-reactive -d-e-s/entity/-time-distribution/update.html","searchKeys":["update","fun update(currentTime: Time)","entity.TimeDistribution.update"]},{"name":"fun valueOf(value: String): EngineImpl.Status","description":"control.EngineImpl.Status.valueOf","location":"-reactive -d-e-s/control/-engine-impl/-status/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): EngineImpl.Status","control.EngineImpl.Status.valueOf"]},{"name":"fun values(): Array<EngineImpl.Status>","description":"control.EngineImpl.Status.values","location":"-reactive -d-e-s/control/-engine-impl/-status/values.html","searchKeys":["values","fun values(): Array<EngineImpl.Status>","control.EngineImpl.Status.values"]},{"name":"interface Action","description":"entity.Action","location":"-reactive -d-e-s/entity/-action/index.html","searchKeys":["Action","interface Action","entity.Action"]},{"name":"interface Condition","description":"entity.Condition","location":"-reactive -d-e-s/entity/-condition/index.html","searchKeys":["Condition","interface Condition","entity.Condition"]},{"name":"interface Content","description":"entity.Content","location":"-reactive -d-e-s/entity/-content/index.html","searchKeys":["Content","interface Content","entity.Content"]},{"name":"interface Engine","description":"control.Engine","location":"-reactive -d-e-s/control/-engine/index.html","searchKeys":["Engine","interface Engine","control.Engine"]},{"name":"interface Environment","description":"entity.Environment","location":"-reactive -d-e-s/entity/-environment/index.html","searchKeys":["Environment","interface Environment","entity.Environment"]},{"name":"interface Event","description":"entity.Event","location":"-reactive -d-e-s/entity/-event/index.html","searchKeys":["Event","interface Event","entity.Event"]},{"name":"interface LinkingRule","description":"entity.LinkingRule","location":"-reactive -d-e-s/entity/-linking-rule/index.html","searchKeys":["LinkingRule","interface LinkingRule","entity.LinkingRule"]},{"name":"interface Neighborhood","description":"entity.Neighborhood","location":"-reactive -d-e-s/entity/-neighborhood/index.html","searchKeys":["Neighborhood","interface Neighborhood","entity.Neighborhood"]},{"name":"interface Node","description":"entity.Node","location":"-reactive -d-e-s/entity/-node/index.html","searchKeys":["Node","interface Node","entity.Node"]},{"name":"interface Scheduler","description":"control.Scheduler","location":"-reactive -d-e-s/control/-scheduler/index.html","searchKeys":["Scheduler","interface Scheduler","control.Scheduler"]},{"name":"interface Time","description":"entity.Time","location":"-reactive -d-e-s/entity/-time/index.html","searchKeys":["Time","interface Time","entity.Time"]},{"name":"open class AwaitableMutableFlow<T>(flow: MutableSharedFlow<T>, ioDispatcher: CoroutineContext = Dispatchers.IO)","description":"flow.AwaitableMutableFlow","location":"-reactive -d-e-s/flow/-awaitable-mutable-flow/index.html","searchKeys":["AwaitableMutableFlow","open class AwaitableMutableFlow<T>(flow: MutableSharedFlow<T>, ioDispatcher: CoroutineContext = Dispatchers.IO)","flow.AwaitableMutableFlow"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.EventImpl.equals","location":"-reactive -d-e-s/entity/-event-impl/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.EventImpl.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.NodeImpl.equals","location":"-reactive -d-e-s/entity/-node-impl/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.NodeImpl.equals"]},{"name":"open operator override fun plus(other: Time): Time","description":"entity.DoubleTime.plus","location":"-reactive -d-e-s/entity/-double-time/plus.html","searchKeys":["plus","open operator override fun plus(other: Time): Time","entity.DoubleTime.plus"]},{"name":"open override fun addEvent(event: Event)","description":"control.ListScheduler.addEvent","location":"-reactive -d-e-s/control/-list-scheduler/add-event.html","searchKeys":["addEvent","open override fun addEvent(event: Event)","control.ListScheduler.addEvent"]},{"name":"open override fun addNeighbor(node: Node): SimpleNeighborhood","description":"entity.SimpleNeighborhood.addNeighbor","location":"-reactive -d-e-s/entity/-simple-neighborhood/add-neighbor.html","searchKeys":["addNeighbor","open override fun addNeighbor(node: Node): SimpleNeighborhood","entity.SimpleNeighborhood.addNeighbor"]},{"name":"open override fun canExecute(): Boolean","description":"entity.EventImpl.canExecute","location":"-reactive -d-e-s/entity/-event-impl/can-execute.html","searchKeys":["canExecute","open override fun canExecute(): Boolean","entity.EventImpl.canExecute"]},{"name":"open override fun computeNeighbors(center: Node, environment: Environment): Set<Node>","description":"entity.PositionLinkingRule.computeNeighbors","location":"-reactive -d-e-s/entity/-position-linking-rule/compute-neighbors.html","searchKeys":["computeNeighbors","open override fun computeNeighbors(center: Node, environment: Environment): Set<Node>","entity.PositionLinkingRule.computeNeighbors"]},{"name":"open override fun eventsUpdated()","description":"control.ListScheduler.eventsUpdated","location":"-reactive -d-e-s/control/-list-scheduler/events-updated.html","searchKeys":["eventsUpdated","open override fun eventsUpdated()","control.ListScheduler.eventsUpdated"]},{"name":"open override fun getAllNodes(): List<Node>","description":"entity.EnvironmentImpl.getAllNodes","location":"-reactive -d-e-s/entity/-environment-impl/get-all-nodes.html","searchKeys":["getAllNodes","open override fun getAllNodes(): List<Node>","entity.EnvironmentImpl.getAllNodes"]},{"name":"open override fun getEventList(): List<Event>","description":"control.ListScheduler.getEventList","location":"-reactive -d-e-s/control/-list-scheduler/get-event-list.html","searchKeys":["getEventList","open override fun getEventList(): List<Event>","control.ListScheduler.getEventList"]},{"name":"open override fun getNeighborhood(node: Node): Neighborhood?","description":"entity.EnvironmentImpl.getNeighborhood","location":"-reactive -d-e-s/entity/-environment-impl/get-neighborhood.html","searchKeys":["getNeighborhood","open override fun getNeighborhood(node: Node): Neighborhood?","entity.EnvironmentImpl.getNeighborhood"]},{"name":"open override fun getNext(): Event?","description":"control.ListScheduler.getNext","location":"-reactive -d-e-s/control/-list-scheduler/get-next.html","searchKeys":["getNext","open override fun getNext(): Event?","control.ListScheduler.getNext"]},{"name":"open override fun getNodeFromId(id: Int): Node","description":"entity.EnvironmentImpl.getNodeFromId","location":"-reactive -d-e-s/entity/-environment-impl/get-node-from-id.html","searchKeys":["getNodeFromId","open override fun getNodeFromId(id: Int): Node","entity.EnvironmentImpl.getNodeFromId"]},{"name":"open override fun getNodePosition(node: Node): Position","description":"entity.EnvironmentImpl.getNodePosition","location":"-reactive -d-e-s/entity/-environment-impl/get-node-position.html","searchKeys":["getNodePosition","open override fun getNodePosition(node: Node): Position","entity.EnvironmentImpl.getNodePosition"]},{"name":"open override fun getNumberOfEventExecutionObserver(): Int","description":"entity.EventImpl.getNumberOfEventExecutionObserver","location":"-reactive -d-e-s/entity/-event-impl/get-number-of-event-execution-observer.html","searchKeys":["getNumberOfEventExecutionObserver","open override fun getNumberOfEventExecutionObserver(): Int","entity.EventImpl.getNumberOfEventExecutionObserver"]},{"name":"open override fun getObservedEvents(): List<Event>","description":"entity.EventImpl.getObservedEvents","location":"-reactive -d-e-s/entity/-event-impl/get-observed-events.html","searchKeys":["getObservedEvents","open override fun getObservedEvents(): List<Event>","entity.EventImpl.getObservedEvents"]},{"name":"open override fun hashCode(): Int","description":"entity.EventImpl.hashCode","location":"-reactive -d-e-s/entity/-event-impl/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.EventImpl.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.NodeImpl.hashCode","location":"-reactive -d-e-s/entity/-node-impl/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.NodeImpl.hashCode"]},{"name":"open override fun initializationComplete(currentTime: Time)","description":"entity.EventImpl.initializationComplete","location":"-reactive -d-e-s/entity/-event-impl/initialization-complete.html","searchKeys":["initializationComplete","open override fun initializationComplete(currentTime: Time)","entity.EventImpl.initializationComplete"]},{"name":"open override fun isNeighbor(center: Node, other: Node, environment: Environment): Boolean","description":"entity.PositionLinkingRule.isNeighbor","location":"-reactive -d-e-s/entity/-position-linking-rule/is-neighbor.html","searchKeys":["isNeighbor","open override fun isNeighbor(center: Node, other: Node, environment: Environment): Boolean","entity.PositionLinkingRule.isNeighbor"]},{"name":"open override fun isValid(): Boolean","description":"entity.DummyCondition.isValid","location":"-reactive -d-e-s/entity/-dummy-condition/is-valid.html","searchKeys":["isValid","open override fun isValid(): Boolean","entity.DummyCondition.isValid"]},{"name":"open override fun observeExecution(): AwaitableMutableSharedFlow<Event>","description":"entity.EventImpl.observeExecution","location":"-reactive -d-e-s/entity/-event-impl/observe-execution.html","searchKeys":["observeExecution","open override fun observeExecution(): AwaitableMutableSharedFlow<Event>","entity.EventImpl.observeExecution"]},{"name":"open override fun removeEvent(event: Event)","description":"control.ListScheduler.removeEvent","location":"-reactive -d-e-s/control/-list-scheduler/remove-event.html","searchKeys":["removeEvent","open override fun removeEvent(event: Event)","control.ListScheduler.removeEvent"]},{"name":"open override fun removeNeighbor(node: Node): SimpleNeighborhood","description":"entity.SimpleNeighborhood.removeNeighbor","location":"-reactive -d-e-s/entity/-simple-neighborhood/remove-neighbor.html","searchKeys":["removeNeighbor","open override fun removeNeighbor(node: Node): SimpleNeighborhood","entity.SimpleNeighborhood.removeNeighbor"]},{"name":"open override fun setLinkingRule(linkingRule: LinkingRule)","description":"entity.EnvironmentImpl.setLinkingRule","location":"-reactive -d-e-s/entity/-environment-impl/set-linking-rule.html","searchKeys":["setLinkingRule","open override fun setLinkingRule(linkingRule: LinkingRule)","entity.EnvironmentImpl.setLinkingRule"]},{"name":"open override fun toDouble(): Double","description":"entity.DoubleTime.toDouble","location":"-reactive -d-e-s/entity/-double-time/to-double.html","searchKeys":["toDouble","open override fun toDouble(): Double","entity.DoubleTime.toDouble"]},{"name":"open override fun updateEvent(currentTime: Time)","description":"entity.EventImpl.updateEvent","location":"-reactive -d-e-s/entity/-event-impl/update-event.html","searchKeys":["updateEvent","open override fun updateEvent(currentTime: Time)","entity.EventImpl.updateEvent"]},{"name":"open override val center: Node","description":"entity.SimpleNeighborhood.center","location":"-reactive -d-e-s/entity/-simple-neighborhood/center.html","searchKeys":["center","open override val center: Node","entity.SimpleNeighborhood.center"]},{"name":"open override val contents: AwaitableMutableStateFlow<List<Content>>","description":"entity.NodeImpl.contents","location":"-reactive -d-e-s/entity/-node-impl/contents.html","searchKeys":["contents","open override val contents: AwaitableMutableStateFlow<List<Content>>","entity.NodeImpl.contents"]},{"name":"open override val events: AwaitableMutableStateFlow<List<Event>>","description":"entity.NodeImpl.events","location":"-reactive -d-e-s/entity/-node-impl/events.html","searchKeys":["events","open override val events: AwaitableMutableStateFlow<List<Event>>","entity.NodeImpl.events"]},{"name":"open override val id: Int","description":"entity.EventImpl.id","location":"-reactive -d-e-s/entity/-event-impl/id.html","searchKeys":["id","open override val id: Int","entity.EventImpl.id"]},{"name":"open override val id: Int","description":"entity.NodeImpl.id","location":"-reactive -d-e-s/entity/-node-impl/id.html","searchKeys":["id","open override val id: Int","entity.NodeImpl.id"]},{"name":"open override val neighborhoods: AwaitableMutableStateFlow<Map<Int, Neighborhood>>","description":"entity.EnvironmentImpl.neighborhoods","location":"-reactive -d-e-s/entity/-environment-impl/neighborhoods.html","searchKeys":["neighborhoods","open override val neighborhoods: AwaitableMutableStateFlow<Map<Int, Neighborhood>>","entity.EnvironmentImpl.neighborhoods"]},{"name":"open override val neighbors: Set<Node>","description":"entity.SimpleNeighborhood.neighbors","location":"-reactive -d-e-s/entity/-simple-neighborhood/neighbors.html","searchKeys":["neighbors","open override val neighbors: Set<Node>","entity.SimpleNeighborhood.neighbors"]},{"name":"open override val node: Node","description":"entity.EventImpl.node","location":"-reactive -d-e-s/entity/-event-impl/node.html","searchKeys":["node","open override val node: Node","entity.EventImpl.node"]},{"name":"open override val nodes: AwaitableMutableStateFlow<List<Node>>","description":"entity.EnvironmentImpl.nodes","location":"-reactive -d-e-s/entity/-environment-impl/nodes.html","searchKeys":["nodes","open override val nodes: AwaitableMutableStateFlow<List<Node>>","entity.EnvironmentImpl.nodes"]},{"name":"open override val nodesToPosition: AwaitableMutableStateFlow<Map<Int, Position>>","description":"entity.EnvironmentImpl.nodesToPosition","location":"-reactive -d-e-s/entity/-environment-impl/nodes-to-position.html","searchKeys":["nodesToPosition","open override val nodesToPosition: AwaitableMutableStateFlow<Map<Int, Position>>","entity.EnvironmentImpl.nodesToPosition"]},{"name":"open override val tau: Time","description":"entity.EventImpl.tau","location":"-reactive -d-e-s/entity/-event-impl/tau.html","searchKeys":["tau","open override val tau: Time","entity.EventImpl.tau"]},{"name":"open override var value: AwaitableMutableStateFlow<Int>","description":"entity.ContentImpl.value","location":"-reactive -d-e-s/entity/-content-impl/value.html","searchKeys":["value","open override var value: AwaitableMutableStateFlow<Int>","entity.ContentImpl.value"]},{"name":"open suspend override fun addContent(content: Content)","description":"entity.NodeImpl.addContent","location":"-reactive -d-e-s/entity/-node-impl/add-content.html","searchKeys":["addContent","open suspend override fun addContent(content: Content)","entity.NodeImpl.addContent"]},{"name":"open suspend override fun addEvent(event: Event)","description":"entity.NodeImpl.addEvent","location":"-reactive -d-e-s/entity/-node-impl/add-event.html","searchKeys":["addEvent","open suspend override fun addEvent(event: Event)","entity.NodeImpl.addEvent"]},{"name":"open suspend override fun addNode(node: Node, position: Position)","description":"entity.EnvironmentImpl.addNode","location":"-reactive -d-e-s/entity/-environment-impl/add-node.html","searchKeys":["addNode","open suspend override fun addNode(node: Node, position: Position)","entity.EnvironmentImpl.addNode"]},{"name":"open suspend override fun emit(value: T)","description":"flow.AwaitableMutableSharedFlow.emit","location":"-reactive -d-e-s/flow/-awaitable-mutable-shared-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: T)","flow.AwaitableMutableSharedFlow.emit"]},{"name":"open suspend override fun emit(value: T)","description":"flow.AwaitableMutableStateFlow.emit","location":"-reactive -d-e-s/flow/-awaitable-mutable-state-flow/emit.html","searchKeys":["emit","open suspend override fun emit(value: T)","flow.AwaitableMutableStateFlow.emit"]},{"name":"open suspend override fun eventRemoved()","description":"entity.EventImpl.eventRemoved","location":"-reactive -d-e-s/entity/-event-impl/event-removed.html","searchKeys":["eventRemoved","open suspend override fun eventRemoved()","entity.EventImpl.eventRemoved"]},{"name":"open suspend override fun execute()","description":"entity.EventImpl.execute","location":"-reactive -d-e-s/entity/-event-impl/execute.html","searchKeys":["execute","open suspend override fun execute()","entity.EventImpl.execute"]},{"name":"open suspend override fun execute()","description":"entity.MoveNodeAction.execute","location":"-reactive -d-e-s/entity/-move-node-action/execute.html","searchKeys":["execute","open suspend override fun execute()","entity.MoveNodeAction.execute"]},{"name":"open suspend override fun execute()","description":"entity.SumAction.execute","location":"-reactive -d-e-s/entity/-sum-action/execute.html","searchKeys":["execute","open suspend override fun execute()","entity.SumAction.execute"]},{"name":"open suspend override fun moveNode(node: Node, position: Position)","description":"entity.EnvironmentImpl.moveNode","location":"-reactive -d-e-s/entity/-environment-impl/move-node.html","searchKeys":["moveNode","open suspend override fun moveNode(node: Node, position: Position)","entity.EnvironmentImpl.moveNode"]},{"name":"open suspend override fun removeContent(content: Content)","description":"entity.NodeImpl.removeContent","location":"-reactive -d-e-s/entity/-node-impl/remove-content.html","searchKeys":["removeContent","open suspend override fun removeContent(content: Content)","entity.NodeImpl.removeContent"]},{"name":"open suspend override fun removeEvent(event: Event)","description":"entity.NodeImpl.removeEvent","location":"-reactive -d-e-s/entity/-node-impl/remove-event.html","searchKeys":["removeEvent","open suspend override fun removeEvent(event: Event)","entity.NodeImpl.removeEvent"]},{"name":"open suspend override fun removeNode(node: Node)","description":"entity.EnvironmentImpl.removeNode","location":"-reactive -d-e-s/entity/-environment-impl/remove-node.html","searchKeys":["removeNode","open suspend override fun removeNode(node: Node)","entity.EnvironmentImpl.removeNode"]},{"name":"open suspend override fun setValue(value: Int)","description":"entity.ContentImpl.setValue","location":"-reactive -d-e-s/entity/-content-impl/set-value.html","searchKeys":["setValue","open suspend override fun setValue(value: Int)","entity.ContentImpl.setValue"]},{"name":"open suspend override fun start()","description":"control.EngineImpl.start","location":"-reactive -d-e-s/control/-engine-impl/start.html","searchKeys":["start","open suspend override fun start()","control.EngineImpl.start"]},{"name":"open suspend override fun updateNeighborhoods(neighborhoods: Map<Int, Neighborhood>)","description":"entity.EnvironmentImpl.updateNeighborhoods","location":"-reactive -d-e-s/entity/-environment-impl/update-neighborhoods.html","searchKeys":["updateNeighborhoods","open suspend override fun updateNeighborhoods(neighborhoods: Map<Int, Neighborhood>)","entity.EnvironmentImpl.updateNeighborhoods"]},{"name":"suspend fun emitAndWait(value: T)","description":"flow.AwaitableMutableFlow.emitAndWait","location":"-reactive -d-e-s/flow/-awaitable-mutable-flow/emit-and-wait.html","searchKeys":["emitAndWait","suspend fun emitAndWait(value: T)","flow.AwaitableMutableFlow.emitAndWait"]},{"name":"suspend fun main()","description":"main","location":"-reactive -d-e-s/[root]/main.html","searchKeys":["main","suspend fun main()","main"]},{"name":"val entries: EnumEntries<EngineImpl.Status>","description":"control.EngineImpl.Status.entries","location":"-reactive -d-e-s/control/-engine-impl/-status/entries.html","searchKeys":["entries","val entries: EnumEntries<EngineImpl.Status>","control.EngineImpl.Status.entries"]}]
