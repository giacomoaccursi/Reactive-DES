name: Build & Deploy

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '.mergify.yml'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'README.md'
      - 'renovate.json'
  pull_request:

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5
      - name: Validate the Gradle Wrapper
        uses: gradle/wrapper-validation-action@v3.5.0

  build:
    needs:
      - validation
    strategy:
        matrix:
          os: [ubuntu, macos, windows]
          java-version: [20]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: ${{ matrix.java-version }}
          distribution: adopt
      - name: Run quality assurance and test with coverage
        run: ./gradlew clean check
      - name: CodeCov
        if: ${{ contains('Linux', runner.os) }}
        uses: codecov/codecov-action@v5.5.1
        with:
          directory: "build/reports/jacoco"

  release:
    concurrency:
        # Allow only one release at a time.
        group: release-${{ github.event.number || github.ref }}
    needs:
      - build
    runs-on: ubuntu-latest
    outputs:
      release-status: ${{ env.release_status }}
    # Release only where secrets are available.
    if: >-
      !github.event.repository.fork
      && (
        github.event_name != 'pull_request'
        || github.event.pull_request.head.repo.full_name == github.repository
      )
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "lts/*"
      - name: Checkout the repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          fetch-depth: 0
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          echo "-- Start release --"
          npm install
          npx semantic-release
          echo "-- End release"
  documentation-deploy:
    needs:
      - release
    runs-on: ubuntu-latest
    if: needs.release.outputs.release-status == 'released'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Generate and deploy documenation
        uses: SmartOperatingBlock/documentation-ghp-action@1.1.0
        with:
          should-generate-code-documentation: true
          code-documentation-generation-command: ./gradlew dokkaHtml
          code-documentation-dst-folder: './build/dokka/html'
          code-documentation-site-folder: 'documentation/code-doc'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  success:
    runs-on: ubuntu-latest
    needs:
      - validation
      - build
      - release
      - documentation-deploy
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
